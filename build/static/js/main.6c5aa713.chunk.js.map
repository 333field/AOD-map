{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["corner1","latLng","corner2","icon","latLngBounds","Icon","iconUrl","iconSize","Boolean","window","location","hostname","match","ReactDOM","render","React","useState","activePark","setActivePark","Map","center","zoom","maxBounds","maxBoundsViscosity","detectRetina","TileLayer","url","attribution","ext","minZoom","maxZoom","parkData","map","park","Marker","key","properties","PARK_ID","position","geometry","coordinates","onClick","_","markerData","building","text1","Number","latitude","longitude","Popup","onClose","NAME","DESCRIPTIO","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"isnmEASWA,EAAUC,iBAAO,CAAC,KAAM,SACxBC,EAAUD,iBAAO,EAAE,MAAO,QAGxBE,GAFUC,uBAAaJ,EAASE,GAEzB,IAAIG,OAAK,CAC3BC,QAAS,cACTC,SAAU,CAAC,GAAI,OCHGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFYD,WAAgB,IAAD,EACQC,IAAMC,SAAS,MADvB,mBACrBC,EADqB,KACTC,EADS,KAG5B,OACE,kBAACC,EAAA,EAAD,CAAKC,OAAQ,CAAC,UAAW,UAAWC,KAAM,IAAKC,UAAW,CAAC,EAAE,IAAK,KAAK,CAAC,GAAI,MAAOC,mBAAoB,EAAGC,cAAc,GACtH,kBAACC,EAAA,EAAD,CACEC,IAAI,oEACJC,YAAY,+NACZC,IAAI,MACJC,QAAS,EACTC,QAAS,GACTN,cAAc,IAGfO,IAAkBC,KAAI,SAAAC,GAAI,OACzB,kBAACC,EAAA,EAAD,CACEC,IAAKF,EAAKG,WAAWC,QACrBC,SAAU,CACRL,EAAKM,SAASC,YAAY,GAC1BP,EAAKM,SAASC,YAAY,IAE5BC,QAAS,WACPvB,EAAce,IAEhB9B,KAAMA,OAITuC,IAAEV,IAAIW,GAAY,SAAAC,GAAQ,OACzB,kBAACV,EAAA,EAAD,CACEC,IAAKS,EAASC,MACdP,SAAU,CACRQ,OAAOF,EAASG,UAChBD,OAAOF,EAASI,YAElB7C,KAAMA,OAGTc,GACC,kBAACgC,EAAA,EAAD,CACEX,SAAU,CACRrB,EAAWsB,SAASC,YAAY,GAChCvB,EAAWsB,SAASC,YAAY,IAElCU,QAAS,WACPhC,EAAc,QAGhB,6BACE,4BAAKD,EAAWmB,WAAWe,MAC3B,2BAAIlC,EAAWmB,WAAWgB,iBE9DtB,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6c5aa713.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon, latLng, latLngBounds } from \"leaflet\";\nimport * as parkData from \"./data/skateboard-parks.json\";\nimport * as markerData from \"./data/aod.json\";\nimport \"./App.css\";\nimport _ from 'lodash';\n\n// setting up bounds\nexport var corner1 = latLng([81.4, 176.08]);\nexport var corner2 = latLng([-74.2, -163.3]);\nexport var mapBounds = latLngBounds(corner1, corner2);\n\nexport const icon = new Icon({\n  iconUrl: \"/reddot.svg\",\n  iconSize: [25, 25]\n});\n\nexport default function App() {\n  const [activePark, setActivePark] = React.useState(null);\n\n  return (\n    <Map center={[50.142255, 8.671575]} zoom={2.7} maxBounds={[[-90, -260],[90, 260]]} maxBoundsViscosity={1} detectRetina={true} >\n      <TileLayer\n        url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.{ext}\"\n        attribution='&copy; <Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n        ext=\"png\"\n        minZoom={3}\n        maxZoom={15}\n        detectRetina={true}\n      />\n\n      {parkData.features.map(park => (\n        <Marker\n          key={park.properties.PARK_ID}\n          position={[\n            park.geometry.coordinates[1],\n            park.geometry.coordinates[0]\n          ]}\n          onClick={() => {\n            setActivePark(park);\n          }}\n          icon={icon}\n        />\n      ))}\n\n      {_.map(markerData, building => (\n        <Marker\n          key={building.text1}\n          position={[\n            Number(building.latitude),\n            Number(building.longitude)\n          ]}\n          icon={icon}\n        />\n      ))}\n      {activePark && (\n        <Popup\n          position={[\n            activePark.geometry.coordinates[1],\n            activePark.geometry.coordinates[0]\n          ]}\n          onClose={() => {\n            setActivePark(null);\n          }}\n        >\n          <div>\n            <h2>{activePark.properties.NAME}</h2>\n            <p>{activePark.properties.DESCRIPTIO}</p>\n          </div>\n        </Popup>\n      )}\n    </Map>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}